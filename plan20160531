Basic Class Structure:

-Block Class
	This is the player, i.e what the user controls
	instance variables:
		xPOS
		yPOS

	methods:
		move()
		fall()
		die()
		Block(xInitial,yInitial) <--- constructor


-Tile Class
	This is what the user moves on
	instance variables:
		xPOS
		yPOS
		isVisible
		isStart
		isEnd

	methods:
		Tile()	<--- constructor

-GameBoard
	This is an array of tiles
	it is randomly generated.
	
	instance variables:
		size
		difficulty

	methods:
		GameBoard(difficulty, size) <--- constructor
		creates an array of tiles, difficulty is measured in size of array, how many pathds there are,
		and how deviated the path is.

-Game
	This is the class that creates a Game with a generated GameBoard and Block.
	
	instance variables:
	player <--- a Block
	gameboard <--- a GameBoard

	methods:
	Game(level) <--- creates a Game for a level, game gets more difficult as level increases.
	
WORK FLOW:

We will use proccessing to make this, I hope i spelled proccessing right there isnt a spell check in vim.

First things first is to create a basic functionality version which should include a basic Game where we 
can hardcode the board as an array, and the user can move the block and finish the level.

The core of the projects difficulty is in the random generation of the GameBoard.  
There needs to be at least one solution but possibly more depending on how difficult the level is.

Once we have the random generation going of the board we can work on the flow of getting from one level to another.
Possibly even allowing the user to select a level, by seeding random generation and letting the user enter a seed for a certain level.
Our goal is with the random generation of the board, there should be able to be unlimited levels.

Then we can go back and revisit our data structures.  We have to think about whether it would be more
efficient to do this with linkedlists or arrays.  We wont to be able to incorprate the data structures
we have learned but we realize that a lot of that will be in the random generation of the board.
Changing the underlying data structure for the game board would not be feasible as a last step, but changing
around our algorithm for board generation is.


In terms of delegating tasks:

We can have one person in charge of creating the Tile class,
one person in charge of creating the GameBoard class, and one
person in charge of the Game class.

Once we have this underlying structure then i imagine it will be a lot of us working together
on things.
